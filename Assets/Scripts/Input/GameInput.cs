//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/New Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace InputSystem
{
    public partial class @GameInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @GameInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""New Controls"",
    ""maps"": [
        {
            ""name"": ""GameControl"",
            ""id"": ""18b50334-1231-42c3-a4a8-7421957046b4"",
            ""actions"": [
                {
                    ""name"": ""CameraMove"",
                    ""type"": ""Value"",
                    ""id"": ""a0591ada-2b0f-4fef-a804-29ba33db7f9f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Click"",
                    ""type"": ""Button"",
                    ""id"": ""34952b04-563c-4f31-a82b-8ff4f00f965e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CasmeraWidthChange"",
                    ""type"": ""Value"",
                    ""id"": ""4d45ae8c-abdb-442e-aab0-c1b33ce89c6b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""KeyBoard"",
                    ""id"": ""677d6e37-3f5e-4a61-8057-e368d40b30e4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""be13c159-e473-4c4b-8cde-bb29b8ffaa2f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""effbaa20-baa3-484c-9d2b-b92d6fc7a24b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""127b2b4a-c50c-4fca-ac05-c4bf4ffd257b"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""8eaa899f-f6dd-4232-99c5-ea02448dda7c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5f8b136b-b225-4db2-858a-5b54b3b39446"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3a208ec0-75ef-4257-84e1-33fbf30da071"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CasmeraWidthChange"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // GameControl
            m_GameControl = asset.FindActionMap("GameControl", throwIfNotFound: true);
            m_GameControl_CameraMove = m_GameControl.FindAction("CameraMove", throwIfNotFound: true);
            m_GameControl_Click = m_GameControl.FindAction("Click", throwIfNotFound: true);
            m_GameControl_CasmeraWidthChange = m_GameControl.FindAction("CasmeraWidthChange", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // GameControl
        private readonly InputActionMap m_GameControl;
        private List<IGameControlActions> m_GameControlActionsCallbackInterfaces = new List<IGameControlActions>();
        private readonly InputAction m_GameControl_CameraMove;
        private readonly InputAction m_GameControl_Click;
        private readonly InputAction m_GameControl_CasmeraWidthChange;
        public struct GameControlActions
        {
            private @GameInput m_Wrapper;
            public GameControlActions(@GameInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @CameraMove => m_Wrapper.m_GameControl_CameraMove;
            public InputAction @Click => m_Wrapper.m_GameControl_Click;
            public InputAction @CasmeraWidthChange => m_Wrapper.m_GameControl_CasmeraWidthChange;
            public InputActionMap Get() { return m_Wrapper.m_GameControl; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(GameControlActions set) { return set.Get(); }
            public void AddCallbacks(IGameControlActions instance)
            {
                if (instance == null || m_Wrapper.m_GameControlActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_GameControlActionsCallbackInterfaces.Add(instance);
                @CameraMove.started += instance.OnCameraMove;
                @CameraMove.performed += instance.OnCameraMove;
                @CameraMove.canceled += instance.OnCameraMove;
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
                @CasmeraWidthChange.started += instance.OnCasmeraWidthChange;
                @CasmeraWidthChange.performed += instance.OnCasmeraWidthChange;
                @CasmeraWidthChange.canceled += instance.OnCasmeraWidthChange;
            }

            private void UnregisterCallbacks(IGameControlActions instance)
            {
                @CameraMove.started -= instance.OnCameraMove;
                @CameraMove.performed -= instance.OnCameraMove;
                @CameraMove.canceled -= instance.OnCameraMove;
                @Click.started -= instance.OnClick;
                @Click.performed -= instance.OnClick;
                @Click.canceled -= instance.OnClick;
                @CasmeraWidthChange.started -= instance.OnCasmeraWidthChange;
                @CasmeraWidthChange.performed -= instance.OnCasmeraWidthChange;
                @CasmeraWidthChange.canceled -= instance.OnCasmeraWidthChange;
            }

            public void RemoveCallbacks(IGameControlActions instance)
            {
                if (m_Wrapper.m_GameControlActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IGameControlActions instance)
            {
                foreach (var item in m_Wrapper.m_GameControlActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_GameControlActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public GameControlActions @GameControl => new GameControlActions(this);
        public interface IGameControlActions
        {
            void OnCameraMove(InputAction.CallbackContext context);
            void OnClick(InputAction.CallbackContext context);
            void OnCasmeraWidthChange(InputAction.CallbackContext context);
        }
    }
}
